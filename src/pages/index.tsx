'use client'
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { api } from "@/utils/api";
import Trashcan from "@/assets/trash-can-solid.svg"
import { Suspense, useState } from 'react';


export default function Home() {
  const user = useSession()
  const tasks = api.tasks.getTasks.useQuery();
  const [taskForm, setTaskForm] = useState('');

  const deleteTaskMutation = api.tasks.deleteTask.useMutation();
  const createTaskMutation = api.tasks.createTask.useMutation();
  const editTaskMutation = api.tasks.completeTask.useMutation();
  
  async function handleDeletion(id: number) {
    const idstring = id.toString();
    console.log('id', id)
   
    try {
      const shouldDelete = window.confirm("Are you sure you want to delete this task?");
      if (!shouldDelete) {
        return;
      }
     await deleteTaskMutation.mutateAsync({ id: idstring });
     await tasks.refetch();
     return undefined;
   } catch (error) {
     console.log(error);
  throw new Error("Failed to delete task.", error as Error);
   }
  }
  async function handleCreation() {
    try {
      console.log(taskForm)
      await createTaskMutation.mutateAsync({ task: taskForm, userId: user.data?.user.id });
      setTaskForm('')
      await tasks.refetch()
    } catch (error) {
      console.log(error);
      throw new Error("Failed to create task.", error as Error);
    }
  }
  async function handleCompletion(id: number, completed: boolean) {
    const completion = !completed;
    try {
      await editTaskMutation.mutateAsync({ taskId: id, completed: completion})
        await tasks.refetch();
      } catch (error) {
        throw new Error("Failed to complete task.", error as Error);
      }
  }


  return (
    <>
      <Head>
        <title>O que fazer?</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="flex flex-col items-center justify-center gap-12 px-4 py-16 ">
         
            <p className="text-2xl text-white">
            O que fazer com o meu amorzinho??
            <br />
            Quantidade de itens: {tasks.data ? tasks.data.length : "Loading."}
          </p>
          <p className='text-xl text-white gap-2 p-1'>
            </p>
            <form className='text-xl text-white gap-2 bg-slate-900 rounded-md p-4 px-8' onSubmit={(e) => {
    e.preventDefault();
    void handleCreation().catch(error => console.error(error));
}}>
            <input placeholder='Add a task' value={taskForm || ""} className='border-2 rounded-md text-green-500' onChange={(e) => setTaskForm(String(e.target.value))} />
            <button type='submit' className='bg-blue-500 px-2 py-2 rounded ml-2 hover:bg-blue-600'>Add</button>
            </form>

          <div className='flex gap-2 p-4 container bg-[#15162c] max-w-2xl rounded-lg flex-col overflow-y-auto scroll-smooth bg-scroll snap-both snap-proximity'>
            <Suspense>              
        {tasks && tasks.data?.map(item => (
          <>
            <div key={item.id} className='text-center my-1 p-2 ml-2 snap-end bg-slate-500 rounded-lg  flex justify-between items-center hover:bg-slate-600'>
              {item.task}

              <div className='flex gap-3 px-4'>
              <input type="checkbox" checked={item.complete} key={item.id} className='bg-blue-500 px-2 py-2 rounded ml-2 ' onClick={void (async () => handleCompletion(item.id, item.complete))}/>
              <Image src={Trashcan as string} alt="Trashcan" width={14} onClick={()=> void (async () => await handleDeletion(item.id))()}/>
              </div>
        </div>
        </>
      ))}
      </Suspense>
        </div>
             <AuthShowcase /> 
          </div>
      </main>
    </>
  );
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function AuthShowcase() {
  const { data: sessionData } = useSession();


  return (
    <div className="flex flex-col items-center justify-center gap-4 bg-gradient-to-b from-[#2e026d] to-[#15162c] rounded-full">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}

      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}

